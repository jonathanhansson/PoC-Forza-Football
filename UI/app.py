import matplotlib.pyplot as plt
import plotly.express as px
import streamlit as st
from streamlit_timeline import st_timeline
import datetime
import time 
import pandas as pd
import sys
import os
import random
import pkg_resources
from PIL import Image
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../data_handler")))
from data_loader import DataLoader
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../machine_learning")))
from rating_predictions import PlayerPrediction
st.set_page_config(page_title="Forza Football AI", page_icon=":soccer:", layout="wide")

# zip_folder_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data"))
# data_loader = DataLoader(zip_folder=zip_folder_path)

# dataframes = data_loader.process_data()

# for filename, df in dataframes.items():
#     print(f"F√∂rhandsvisning av {filename}:")
#     st.write(df.head(), "\n")

@st.cache_data
def load_predictions():
    players_csv_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "Players.csv"))
    prediction = PlayerPrediction(players_csv_path)
    X_train, X_test, y_train, y_test = prediction.prepare_data()
    model = prediction.train_model(X_train, y_train)
    y_pred, mse, mae, r2 = prediction.evaluate_model(model, X_test, y_test)
    return y_test, y_pred, mse, mae, r2

@st.cache_data
def plot_graph(y_test, y_pred):
    plt.figure(figsize=(10, 6))

    plt.scatter(y_test, y_pred, color="blue", alpha=0.5, label="Predicted values")
    plt.plot([y_test.min(), y_test.max()], [y_pred.min(), y_pred.max()], color="red", linestyle="-", label="The perfect prediction line")

    plt.legend()

    plt.xlim(1, 10)
    plt.ylim(1, 10)

    plt.title("Comparison of Actual vs Predicted Player Ratings")
    plt.xlabel("Actual Player Rating")
    plt.ylabel("Predicted Player Rating")

    st.pyplot(plt)

@st.cache_data
def load_and_filter_data():
    df = pd.read_csv(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "Players.csv")))
    return df


def main():
    df = load_and_filter_data()
    
   
    with st.sidebar:
        st.title("‚öôÔ∏è Kontrollpanel")  # Titel med emoji
        
        # V√§lj sida (om du har flera sidor)
        selected_page = st.radio(
            "Meny",
            ["Hem", "Roadmap", "Data", "Modell", "Inst√§llningar"],
            index=0
        )
        
        # Globala inst√§llningar (exempel)
        st.divider()
        st.write("**Inst√§llningar**")
        dark_mode = st.toggle("M√∂rkt l√§ge üåô")
        debug_mode = st.toggle("Debug-l√§ge", help="Aktivera f√∂r tekniska detaljer")
        
        # Snabbl√§nkar
        st.divider()
    
    if selected_page == "Hem":
        col1, col2, col3, col4 = st.columns([0.25, 0.25, 0.25, 0.25])
        with col1:
            # Ladda upp Forzas logga (ers√§tt med din bildfil)
            logo = Image.open("../forza.png")
            st.image(logo, width=200)
        with col2:
            st.title("Forza AI Hub")
            st.markdown("""
            *ü§ñ Powered by Machine Learning*
                        
            *üå≥ Trained with random forest regression*
                        
            *‚öΩ Could improve further with Forza API data*
    """)
    if selected_page == "Roadmap":
    # Initiera status om den inte finns
        if 'roadmap_status' not in st.session_state:
            st.session_state.roadmap_status = ["‚ö™ Planerad"] * 4

        with st.expander("üöÄ 12-veckors Roadmap (Klicka f√∂r att se planen)"):
            # Visa roadmap-tabellen (samma som tidigare)
            st.markdown(f"""
            ### **üéØ M√•l: G√∂r din PoC produktionsredo med Forzas data**  
            | Vecka | Fokus                     | Leverabler                             | Status       |
            |-------|---------------------------|----------------------------------------|--------------|
            | 1-2   | **Data Pipeline**         | Automatiserad datainsamling fr√•n Forza | {st.session_state.roadmap_status[0]} |
            | 3-5   | **Modelloptimering**      | MAE < 0.4, SHAP-f√∂rklaringar           | {st.session_state.roadmap_status[1]} |
            | 6-8   | **API-Integration**       | FastAPI-endpoint f√∂r betyg             | {st.session_state.roadmap_status[2]} |
            | 9-12  | **Anv√§ndartester**        | A/B-test mot nuvarande system          | {st.session_state.roadmap_status[3]} |
            """)

            ### --- L√ÑGG KNAPPARNA H√ÑR UNDER TABELLEN --- ###
            cols = st.columns([1, 1, 1, 1])
            with cols[0]:
                if st.button("Sprint 1-2 klar", help="Markera som avslutad"):
                    st.session_state.roadmap_status[0] = "‚úÖ Klar"
                    st.rerun()
            with cols[1]:
                if st.button("Sprint 3-5 klar", help="Markera som avslutad"):
                    st.session_state.roadmap_status[1] = "‚úÖ Klar"
                    st.rerun()
            with cols[2]:
                if st.button("Sprint 6-8 klar", help="Markera som avslutad"):
                    st.session_state.roadmap_status[2] = "‚úÖ Klar"
                    st.rerun()
            with cols[3]:
                if st.button("Sprint 9-12 klar", help="Markera som avslutad"):
                    st.session_state.roadmap_status[3] = "‚úÖ Klar"
                    st.rerun()
            ### ------------------------------------------ ###

            # Progressbar som uppdateras automatiskt
            completed = st.session_state.roadmap_status.count("‚úÖ Klar")
            st.progress(completed / 4, text=f"{completed}/4 sprintar klara")

            # Global uppdateringsknapp (alternativ)
            if st.button("√Öterst√§ll alla statusar"):
                st.session_state.roadmap_status = ["‚ö™ Planerad"] * 4
                st.rerun()

    if selected_page == "Modell":
        with st.expander("ü§ñ Hur presterar Forza Football AI?"):
            y_test, y_pred, mse, mae, r2 = load_predictions()
            st.write(f"Mean Squared Error: {mse:.2f}")
            st.write(f"Mean Absolute Error: {mae:.2f}")
            st.write(f"R¬≤: {r2:.2f}")
            plot_graph(y_test, y_pred)


        with st.expander("üå≥ Hur funkar Random Forest?"):

            # Samla data knapp med tooltip
            if st.button('1. Samla data', help="H√§r samlar vi data som ska anv√§ndas f√∂r att tr√§na modellen. Det kan vara data fr√•n olika k√§llor som CSV-filer, databaser eller API:er."):
                pass  # H√§r kan du l√§gga till ytterligare funktionalitet om du vill

            # Rensa data knapp med tooltip
            if st.button('2. Rensa data', help="I detta steg rensar vi datan genom att ta bort saknade v√§rden, hantera uteliggare och kategorisera variabler om det beh√∂vs."):
                pass
            
            # Bygg och tr√§na modellen knapp med tooltip
            if st.button('3. Bygg och tr√§na modellen', help="Vi bygger v√•r Random Forest-modell genom att tr√§na flera beslutstr√§d p√• v√•ra data. Varje tr√§d l√§r sig olika delar av datan f√∂r att ge b√§ttre generalisering."):
                pass
            
            # Utv√§rdera modellen knapp med tooltip
            if st.button('4. Utv√§rdera modellen', help="Efter att ha tr√§nat modellen utv√§rderar vi dess prestanda genom att anv√§nda testdata och ber√§kna t.ex. MSE, MAE och MSE."):
                pass
            
            # Anv√§nd modellen f√∂r prediktion knapp med tooltip
            if st.button('5. Anv√§nd modellen f√∂r prediktion', help="N√§r modellen √§r tr√§nad och utv√§rderad, kan den anv√§ndas f√∂r att g√∂ra prediktioner p√• nya data."):
                pass

    

        with st.expander("üìä Vill du betygs√§tta Messi s√§songen 2018-2019?"):
            user_rating = st.selectbox("V√§lj en rating mellan 1-10", list(range(1, 11)))

            rating_placeholder = st.empty()

            # Initiera session_state om det inte finns
            if "betyg_genererat" not in st.session_state:
                st.session_state.betyg_genererat = False

            if st.button("Generera betyg"):
                with st.spinner("AI t√§nker... ü§ñ"):
                    ai_rating = random.randint(10, 10)  # Messi √§r alltid 10 üòÜ
                    time.sleep(2)
                    st.session_state.betyg_genererat = True  # Markera att betyg har genererats
                    
                    # Uppdatera texten efter knappen
                    rating_placeholder.write(f"üë® Ditt betyg: {user_rating}. \n\nü§ñ AI betyg: {ai_rating}.")

            # Visa knappen f√∂r att fr√•ga varf√∂r bara efter att betyget √§r genererat
            if st.session_state.betyg_genererat:
                if st.button("ü§ñ Varf√∂r ger jag detta betyg till Messi s√§songen 2018-2019?"):
                    with st.spinner("AI skriver... ü§ñ"):
                        time.sleep(2)
                        st.write("Jag ger Messi betyget 10 eftersom han gjorde 51 m√•l p√• 50 matcher och vann Ballon d'Or.")

    if selected_page == "Data":
        with st.expander("‚úçÔ∏è Cleanad tabell (kraftigt minimerad)"):
            st.dataframe(df[["Team", "Player", "Season", "Pos", "PositionWeightedRating"]])

                    
     


if __name__ == "__main__":
    main()